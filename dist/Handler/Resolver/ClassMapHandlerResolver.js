"use strict";
/**
 * Provides the ability to resolve a specific handler for a given message.
 * It is based on the handling collection and uses an extractor to
 * get the identifier of a message and a resolver to instantiate a new handler.
 */
var ClassMapHandlerResolver = (function () {
    /**
     * Creates a new ClassMapHandlerResolver.
     * @param {MessageHandlingCollection} _messageHandlingCollection The message handling collection.
     * @param {CallableResolverInterface} _callableResolver The resolver to instantiate the handler.
     * @param {MessageTypeExtractorInterface} _extractor The extractor to get the message identifier.
     */
    function ClassMapHandlerResolver(_messageHandlingCollection, _callableResolver, _extractor) {
        this._messageHandlingCollection = _messageHandlingCollection;
        this._callableResolver = _callableResolver;
        this._extractor = _extractor;
    }
    /**
     * @inheritDoc
     */
    ClassMapHandlerResolver.prototype.getHandler = function (message) {
        // Extracts the identifier.
        var identifier = this._extractor.extract(message);
        // Gets the handler based on the message identifier.
        var handler = this._messageHandlingCollection.getHandler(identifier);
        // Resolves the handler function.
        return this._callableResolver.resolve(handler);
    };
    return ClassMapHandlerResolver;
}());
exports.ClassMapHandlerResolver = ClassMapHandlerResolver;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9IYW5kbGVyL1Jlc29sdmVyL0NsYXNzTWFwSGFuZGxlclJlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFNQTs7OztHQUlHO0FBQ0g7SUFFRTs7Ozs7T0FLRztJQUNILGlDQUNVLDBCQUFxRCxFQUNyRCxpQkFBNEMsRUFDNUMsVUFBeUM7UUFGekMsK0JBQTBCLEdBQTFCLDBCQUEwQixDQUEyQjtRQUNyRCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQTJCO1FBQzVDLGVBQVUsR0FBVixVQUFVLENBQStCO0lBQ2hELENBQUM7SUFFSjs7T0FFRztJQUNILDRDQUFVLEdBQVYsVUFBVyxPQUFZO1FBQ3JCLDJCQUEyQjtRQUMzQixJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsRCxvREFBb0Q7UUFDcEQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLDBCQUEwQixDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyRSxpQ0FBaUM7UUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUNILDhCQUFDO0FBQUQsQ0F6QkEsQUF5QkMsSUFBQTtBQXpCWSwrQkFBdUIsMEJBeUJuQyxDQUFBIiwiZmlsZSI6IkhhbmRsZXIvUmVzb2x2ZXIvQ2xhc3NNYXBIYW5kbGVyUmVzb2x2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IE1lc3NhZ2VIYW5kbGVyUmVzb2x2ZXJJbnRlcmZhY2UgfSBmcm9tICcuL01lc3NhZ2VIYW5kbGVyUmVzb2x2ZXJJbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ2FsbGFibGVSZXNvbHZlckludGVyZmFjZSB9IGZyb20gJy4uLy4uL0NhbGxhYmxlUmVzb2x2ZXIvQ2FsbGFibGVSZXNvbHZlckludGVyZmFjZSc7XG5pbXBvcnQgeyBNZXNzYWdlSGFuZGxpbmdDb2xsZWN0aW9uIH0gZnJvbSAnLi4vLi4vQ29sbGVjdGlvbi9NZXNzYWdlSGFuZGxpbmdDb2xsZWN0aW9uJztcbmltcG9ydCB7IE1lc3NhZ2VUeXBlRXh0cmFjdG9ySW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vRXh0cmFjdG9yL01lc3NhZ2VUeXBlRXh0cmFjdG9ySW50ZXJmYWNlJztcblxuLyoqXG4gKiBQcm92aWRlcyB0aGUgYWJpbGl0eSB0byByZXNvbHZlIGEgc3BlY2lmaWMgaGFuZGxlciBmb3IgYSBnaXZlbiBtZXNzYWdlLlxuICogSXQgaXMgYmFzZWQgb24gdGhlIGhhbmRsaW5nIGNvbGxlY3Rpb24gYW5kIHVzZXMgYW4gZXh0cmFjdG9yIHRvXG4gKiBnZXQgdGhlIGlkZW50aWZpZXIgb2YgYSBtZXNzYWdlIGFuZCBhIHJlc29sdmVyIHRvIGluc3RhbnRpYXRlIGEgbmV3IGhhbmRsZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGFzc01hcEhhbmRsZXJSZXNvbHZlciBpbXBsZW1lbnRzIE1lc3NhZ2VIYW5kbGVyUmVzb2x2ZXJJbnRlcmZhY2Uge1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IENsYXNzTWFwSGFuZGxlclJlc29sdmVyLlxuICAgKiBAcGFyYW0ge01lc3NhZ2VIYW5kbGluZ0NvbGxlY3Rpb259IF9tZXNzYWdlSGFuZGxpbmdDb2xsZWN0aW9uIFRoZSBtZXNzYWdlIGhhbmRsaW5nIGNvbGxlY3Rpb24uXG4gICAqIEBwYXJhbSB7Q2FsbGFibGVSZXNvbHZlckludGVyZmFjZX0gX2NhbGxhYmxlUmVzb2x2ZXIgVGhlIHJlc29sdmVyIHRvIGluc3RhbnRpYXRlIHRoZSBoYW5kbGVyLlxuICAgKiBAcGFyYW0ge01lc3NhZ2VUeXBlRXh0cmFjdG9ySW50ZXJmYWNlfSBfZXh0cmFjdG9yIFRoZSBleHRyYWN0b3IgdG8gZ2V0IHRoZSBtZXNzYWdlIGlkZW50aWZpZXIuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9tZXNzYWdlSGFuZGxpbmdDb2xsZWN0aW9uOiBNZXNzYWdlSGFuZGxpbmdDb2xsZWN0aW9uLFxuICAgIHByaXZhdGUgX2NhbGxhYmxlUmVzb2x2ZXI6IENhbGxhYmxlUmVzb2x2ZXJJbnRlcmZhY2UsXG4gICAgcHJpdmF0ZSBfZXh0cmFjdG9yOiBNZXNzYWdlVHlwZUV4dHJhY3RvckludGVyZmFjZVxuICApIHt9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBnZXRIYW5kbGVyKG1lc3NhZ2U6IGFueSk6IEZ1bmN0aW9uIHtcbiAgICAvLyBFeHRyYWN0cyB0aGUgaWRlbnRpZmllci5cbiAgICBsZXQgaWRlbnRpZmllciA9IHRoaXMuX2V4dHJhY3Rvci5leHRyYWN0KG1lc3NhZ2UpO1xuICAgIC8vIEdldHMgdGhlIGhhbmRsZXIgYmFzZWQgb24gdGhlIG1lc3NhZ2UgaWRlbnRpZmllci5cbiAgICBsZXQgaGFuZGxlciA9IHRoaXMuX21lc3NhZ2VIYW5kbGluZ0NvbGxlY3Rpb24uZ2V0SGFuZGxlcihpZGVudGlmaWVyKTtcbiAgICAvLyBSZXNvbHZlcyB0aGUgaGFuZGxlciBmdW5jdGlvbi5cbiAgICByZXR1cm4gdGhpcy5fY2FsbGFibGVSZXNvbHZlci5yZXNvbHZlKGhhbmRsZXIpO1xuICB9XG59XG4iXX0=
